# -*- coding: utf-8 -*-
"""MOVIE_GENRE_CLASSIFICATION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12aJijuNY0yA9bfqTVC_dDODlsm_S9aTo
"""

import pandas as pd
import re
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

# Load and preprocess data
def load_data(file_path):
    data = []
    with open(file_path, 'r', encoding='utf-8') as f:
        for line in f:
            parts = line.strip().split(" ::: ")
            if len(parts) == 4:
                movie_id, title, genre, plot = parts
                data.append((genre, plot))
    df = pd.DataFrame(data, columns=["genre", "plot"])
    return df

train_data = load_data("train_data.txt")
test_data = load_data("test_data_solution.txt")

# Text preprocessing (optional step for cleaning)
def preprocess_text(text):
    text = text.lower()  # Lowercase
    text = re.sub(r'[^a-zA-Z\s]', '', text)  # Remove special characters
    text = re.sub(r'\s+', ' ', text)  # Remove extra spaces
    return text

train_data['plot'] = train_data['plot'].apply(preprocess_text)
test_data['plot'] = test_data['plot'].apply(preprocess_text)

# Split train/test sets
X_train, X_val, y_train, y_val = train_test_split(
    train_data['plot'], train_data['genre'], test_size=0.2, random_state=42)

# TF-IDF feature extraction
tfidf = TfidfVectorizer(max_features=5000)
X_train_tfidf = tfidf.fit_transform(X_train)
X_val_tfidf = tfidf.transform(X_val)
X_test_tfidf = tfidf.transform(test_data['plot'])

# Model training and evaluation function
def train_and_evaluate(model, X_train, y_train, X_val, y_val):
    model.fit(X_train, y_train)
    y_pred = model.predict(X_val)
    print(f"Accuracy: {accuracy_score(y_val, y_pred)}")
    print(classification_report(y_val, y_pred, zero_division=0))

# Logistic Regression
print("Logistic Regression Results:")
lr_model = LogisticRegression(max_iter=200, class_weight='balanced')
train_and_evaluate(lr_model, X_train_tfidf, y_train, X_val_tfidf, y_val)

# Support Vector Machine
print("SVM Results:")
svm_model = SVC(kernel='linear', class_weight='balanced')
train_and_evaluate(svm_model, X_train_tfidf, y_train, X_val_tfidf, y_val)

# Predict on test data with SVM (or use Logistic Regression if preferred)
test_predictions = svm_model.predict(X_test_tfidf)
test_data['predicted_genre'] = test_predictions

# Evaluate test predictions
print("\nTest Data Results:")
print(f"Accuracy: {accuracy_score(test_data['genre'], test_predictions)}")
print(classification_report(test_data['genre'], test_predictions, zero_division=0))

# Save predictions
test_data.to_csv("predicted_test_data.csv", index=False)