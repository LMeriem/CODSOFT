# -*- coding: utf-8 -*-
"""CUSTOMER_CHURN_PREDICTION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15i5ASLQVtOHqCLiZcKSdhg3v3KU6eAnC
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix

# Load the dataset
data = pd.read_csv('Churn_Modelling.csv')

# Display the first few rows of the dataset
data.head()

# Drop unnecessary columns
data.drop(['RowNumber', 'CustomerId', 'Surname'], axis=1, inplace=True)

# Encode categorical variables
label_encoder = LabelEncoder()
data['Geography'] = label_encoder.fit_transform(data['Geography'])
data['Gender'] = label_encoder.fit_transform(data['Gender'])

# Features and target variable
X = data.drop('Exited', axis=1)  # Features
y = data['Exited']  # Target variable

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Initialize a list to store results
results = []

# Function to train, evaluate a model, and store results
def train_and_evaluate(model, model_name):
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    report = classification_report(y_test, y_pred, output_dict=True)
    confusion = confusion_matrix(y_test, y_pred)

    # Print model results
    print(f"{model_name} Classifier:")
    print(f"Accuracy: {accuracy:.4f}")
    print("Confusion Matrix:\n", confusion)
    print("Classification Report:\n", classification_report(y_test, y_pred))
    print("\n" + "-"*40 + "\n")

    # Append results to the results list
    results.append({
        "Model": model_name,
        "Accuracy": accuracy,
        "Confusion Matrix": confusion,
        "Classification Report": report
    })

# Train and evaluate Logistic Regression classifier
logistic_model = LogisticRegression(random_state=42, max_iter=200)
train_and_evaluate(logistic_model, "Logistic Regression")

# Print final summary of all results
print("\nFinal Results Summary:\n")
for result in results:
    print(f"Model: {result['Model']}")
    print(f"Accuracy: {result['Accuracy']:.4f}")
    print("Confusion Matrix:\n", result["Confusion Matrix"])
    print("Classification Report:\n", pd.DataFrame(result["Classification Report"]).transpose())
    print("\n" + "="*40 + "\n")